version: '2.1'

services:
  minio1:
    image: minio/minio:$MINIO_VERSION
    container_name: "customminio1"
    volumes:
      - data1:/data
    environment:
      MINIO_ACCESS_KEY: $MINIO_ACCESS_KEY
      MINIO_SECRET_KEY: $MINIO_SECRET_KEY
    command: server data
    networks:
      - minionetwork

  minio2:
    image: minio/minio:$MINIO_VERSION  
    container_name: "customminio2"
    volumes:
      - data1:/data
    environment:
      MINIO_ACCESS_KEY: $MINIO_ACCESS_KEY
      MINIO_SECRET_KEY: $MINIO_SECRET_KEY
    command: server data
    networks:
      - minionetwork

  minio3:
    image: minio/minio:$MINIO_VERSION
    container_name: "customminio3"
    volumes:
      - data1:/data
    environment:
      MINIO_ACCESS_KEY: $MINIO_ACCESS_KEY
      MINIO_SECRET_KEY: $MINIO_SECRET_KEY
    command: server data
    networks:
      - minionetwork

  minio4:
    image: minio/minio:$MINIO_VERSION
    container_name: "customminio4"
    volumes:
      - data1:/data
    environment:
      MINIO_ACCESS_KEY: $MINIO_ACCESS_KEY
      MINIO_SECRET_KEY: $MINIO_SECRET_KEY
    command: server data
    networks:
      - minionetwork

  proxy:
    image: minio-proxy
    container_name: $MINIO_PROXY_NAME
    build:
      context: ./src/minio/proxy
      dockerfile: Dockerfile
    volumes:
      - data1:/data
    ports:
      - '9000:8080'
    depends_on:
      - minio1
      - minio2
      - minio3
      - minio4
    links:
      - minio1:minio_1
      - minio2:minio_2
      - minio3:minio_3
      - minio4:minio_4
    networks:
      - minionetwork

  apitemplate:
    image: apitemplate
    build:
      context: ./src
      dockerfile: api/Dockerfile
    container_name: $API_CONTAINER_NAME
    ports:
      - $API_PORT:80
    environment: 
      ASPNETCORE_ENVIRONMENT: Production
      X_BACKEND_SERVER: server1
      MINIO_ENDPOINT: $MINIO_ENDPOINT
      MINIO_ACCESS_KEY: $MINIO_ACCESS_KEY
      MINIO_SECRET_KEY: $MINIO_SECRET_KEY
    depends_on:
      - proxy
    networks:
      - minionetwork
networks:
  minionetwork:
    driver: bridge
     
volumes:
  data1:
    driver: local
    driver_opts:
      type: none
      device: /Users/temel/Desktop/MiniData
      o: bind
